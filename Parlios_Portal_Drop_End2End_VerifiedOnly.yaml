/run-mode-agent
Name: Parlios_Portal_Drop_End2End_VerifiedOnly
Assume_Yes: true

Goal: >
  Scanner l’organisation GitHub "Minot-Prod" pour détecter toutes les apps vérifiées & drop-ready,
  embarquer leurs artefacts statiques, construire le portail Parlios complet (pages, brand, manifest),
  et renvoyer le ZIP final "Parlios_Box_latest.zip" prêt pour Netlify Drop dans le chat.

Vars:
  GH_OWNER: "Minot-Prod"
  GH_PAT: "ghp_xxxxxxxTON_TOKEN_ICIxxxxxx"  # ⚠️ Ton token GitHub personnel (scope repo:read)
  MAX_APPS: 999
  VERIFIED_LOOKUPS: ".ua/VERIFIED|.ua/QA_PASS|QA_REPORT.md|APP_STATUS.json"
  VERIFIED_TAGS: "verified|qa-pass|stable"
  VERIFIED_WORKFLOWS: "QA Guardian|Lighthouse|Pa11y|ua_finalize_all|research-collector"

Plan:
  - Cloner l’organisation ${GH_OWNER} via l’API GitHub.
  - Identifier les dépôts contenant un indicateur “verified” :
      * Fichier .ua/VERIFIED ou .ua/QA_PASS
      * Fichier APP_STATUS.json avec `"verified": true`
      * Fichier QA_REPORT.md contenant “status: pass”
      * Tag ou release incluant “verified”, “qa-pass” ou “stable”
      * Workflow récent (<14 jours) avec un des noms définis dans VERIFIED_WORKFLOWS
  - Vérifier pour chaque dépôt si un build statique existe (dist/, out/, build/, public/).
  - Si présent → copier dans /apps/<slug>/.
  - Si absent → exclure du portail (policy verified-only + drop-ready).
  - Construire :
      * /index.html
      * /outils/index.html (liste d’apps vérifiées)
      * /hub/index.html
      * /data/tools.registry.json
      * /assets/brand/tokens.css + favicon/logo
      * /site.webmanifest
  - Générer un rapport QA (QA_REPORT.md).
  - Créer un ZIP Netlify Drop prêt à l’emploi → dist_zip/Parlios_Box_latest.zip.
  - Renvoyer le ZIP dans le chat.

ReturnArtifacts:
  - dist_zip/Parlios_Box_latest.zip
