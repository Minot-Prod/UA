{
  "name": "UA Knowledge Sync",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ua/knowledge/sync",
        "responseMode": "onReceived",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 300],
      "name": "Webhook In"
    },
    {
      "parameters": {
        "functionCode": "const p = items[0].json;\n// Filtrage des fichiers whitelisted seulement\nconst files = (p.files || []).filter(f => f.whitelisted && f.base64);\n// Construit un texte court pour LLM (max ~8k chars)\nfunction firstN(s, n){return (s||'').slice(0,n)}\nlet llmText = `Repo: ${p.repo}\\nBranch: ${p.branch}\\nActor: ${p.actor}\\nEvent: ${p.event}\\nCommit: ${p.commit?.id}\\nMessage: ${p.commit?.message}\\nTotal files: ${p.stats?.total_changed}\\nWhitelisted: ${p.stats?.whitelisted_count}\\n\\nFILES:\\n`;\nfor (const f of files) {\n  const diff = firstN(f.diff, 4000);\n  llmText += `\\n- ${f.path} [${f.status}]\\nDIFF:\\n${diff}\\n`;\n}\nreturn [{ json: { meta: p, llmText, files } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [480, 300],
      "name": "Prepare LLM Input"
    },
    {
      "parameters": {
        "mode": "chat",
        "systemMessage": "Tu es l'assistant de knowledge UA. Résume précisément les changements fournis. Extrais: (1) points d'apprentissage, (2) risques, (3) actions, (4) tags. Référence les fichiers concernés. Conserve un ton concis et opérationnel.",
        "prompt": "Contenu à analyser:\\n{{$json.llmText}}",
        "temperature": 0.2
      },
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [760, 300],
      "name": "LLM Summarizer",
      "credentials": {
        "openAiApi": {
          "id": "your-openai-cred-id"
        }
      }
    },
    {
      "parameters": {
        "resource": "page",
        "operation": "create",
        "pageId": "",
        "databaseId": "YOUR_NOTION_DB_ID",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "Name",
              "type": "title",
              "value": "={{$json.meta.commit.id}} — {{$json.meta.commit.message}}"
            },
            {
              "key": "Repo",
              "type": "rich_text",
              "value": "={{$json.meta.repo}}"
            },
            {
              "key": "Branch",
              "type": "rich_text",
              "value": "={{$json.meta.branch}}"
            },
            {
              "key": "Actor",
              "type": "rich_text",
              "value": "={{$json.meta.actor}}"
            },
            {
              "key": "Files",
              "type": "rich_text",
              "value": "={{$json.meta.stats.whitelisted_count}} whitelisted / {{$json.meta.stats.total_changed}} total"
            }
          ]
        },
        "simple": true,
        "options": {
          "pageContent": "## Résumé\n{{$json[\"choices\"][0][\"message\"][\"content\"]}}\n\n---\n### Métadonnées\n- Repo: {{$json.meta.repo}}\n- Branch: {{$json.meta.branch}}\n- Actor: {{$json.meta.actor}}\n- Commit: {{$json.meta.commit.id}}\n- Message: {{$json.meta.commit.message}}\n\n### Fichiers (noms)\n{{$json.meta.files.map(f=>`- ${f.path} [${f.status}]`).join('\\n')}}"
        }
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [1040, 300],
      "name": "Notion: Create Page",
      "credentials": {
        "notionApi": {
          "id": "your-notion-cred-id"
        }
      }
    }
  ],
  "connections": {
    "Webhook In": { "main": [ [ { "node": "Prepare LLM Input", "type": "main", "index": 0 } ] ] },
    "Prepare LLM Input": { "main": [ [ { "node": "LLM Summarizer", "type": "main", "index": 0 } ] ] },
    "LLM Summarizer": { "main": [ [ { "node": "Notion: Create Page", "type": "main", "index": 0 } ] ] }
  }
}
