import fs from 'fs'; const LH=process.env.SUMMARY_LH||'lighthouse.summary.prod.json'; const P=process.env.SUMMARY_PA11Y||'pa11y.summary.json'; const L=process.env.SUMMARY_LINKS||'links.summary.json'; const QA=process.env.QA_PATH||'qa.metrics.json'; const ex=p=>{try{return fs.existsSync(p)}catch{return false}}; const read=p=>ex(p)?JSON.parse(fs.readFileSync(p,'utf8')):null; const lh=read(LH)||{}; const pa=read(P)||{}; const li=read(L)||{}; let qa={updated:new Date().toISOString(),scores:{}}; if(ex(QA)){ try{qa=JSON.parse(fs.readFileSync(QA,'utf8'))}catch{} } qa.updated=new Date().toISOString(); const map=u=>{ try{const {pathname}=new URL(u); if(pathname.endsWith('/apps/creatorhub-mini-plus/')) return 'creatorhub-mini-plus'; if(pathname.endsWith('/apps/studio-express-ia/')) return 'studio-express-ia'; if(pathname.endsWith('/apps/prompt-designer-pro/')) return 'prompt-designer-pro'; if(pathname.endsWith('/apps/logo-flash-ai/')) return 'logo-flash-ai'; if(pathname.endsWith('/apps/caption-craft/')) return 'caption-craft'; return null }catch{return null} }; for(const [u,s] of Object.entries(lh)){ const slug=map(u); if(!slug) continue; qa.scores[slug]=qa.scores[slug]||{}; qa.scores[slug].lighthouse=Math.round(Number(s?.perf)||0) } for(const [u,s] of Object.entries(pa)){ const slug=map(u); if(!slug) continue; qa.scores[slug]=qa.scores[slug]||{}; qa.scores[slug].pa11y=(typeof s==='string'?s:(s?.status||'—')) } for(const [u,s] of Object.entries(li)){ const slug=map(u); if(!slug) continue; qa.scores[slug]=qa.scores[slug]||{}; qa.scores[slug].links=(s?.ok===true && Number(s?.broken)===0)?'OK':`WARN(${s?.broken??'?'})` } fs.writeFileSync(QA, JSON.stringify(qa,null,2)); console.log('✅ Updated', QA);