name: UA Auto-App • Build & Deploy (Netlify/Vercel)

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: "netlify|vercel"
        required: true
        default: "netlify"

permissions:
  contents: read
  id-token: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: "20"
      PY_VERSION: "3.11"
      DEPLOY_TARGET: ${{ github.event.inputs.deploy_target }}
      # Supabase (front usage only; server keys NEVER in client)
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      # Netlify
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      # Vercel
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: 🧾 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: 🛠️ Build frontend
        working-directory: app
        run: |
          npm ci || npm i
          echo "VITE_SUPABASE_URL=${SUPABASE_URL}" > .env
          echo "VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .env
          npm run build

      - name: 🧪 Smoke run backend (local)
        working-directory: api
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install -r requirements.txt
          python - << 'PY'
          import subprocess, time, requests, os
          p = subprocess.Popen([".venv/bin/uvicorn","main:app","--port","8000"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
          time.sleep(2)
          try:
            r = requests.get("http://127.0.0.1:8000/healthz", timeout=5)
            print("HEALTHZ:", r.status_code, r.text)
          finally:
            p.terminate()
          PY

      - name: 🚀 Deploy (Netlify)
        if: env.DEPLOY_TARGET == 'netlify'
        run: |
          npm i -g netlify-cli
          netlify --version
          # Create site (first time) if needed
          if [ -z "${NETLIFY_SITE_ID}" ]; then
            echo "ERROR: NETLIFY_SITE_ID missing"; exit 2
          fi
          DEPLOY_JSON=$(netlify deploy --dir=app/dist --prod --json --site $NETLIFY_SITE_ID)
          echo "$DEPLOY_JSON" | tee deploy_netlify.json
          URL=$(node -e "console.log(JSON.parse(require('fs').readFileSync('deploy_netlify.json','utf8')).url||'')")
          echo "PUBLIC_URL=$URL" >> $GITHUB_ENV

      - name: 🚀 Deploy (Vercel)
        if: env.DEPLOY_TARGET == 'vercel'
        run: |
          npm i -g vercel
          vercel --version
          if [ -z "${VERCEL_TOKEN}" ] || [ -z "${VERCEL_PROJECT_ID}" ] || [ -z "${VERCEL_ORG_ID}" ]; then
            echo "ERROR: Vercel secrets missing"; exit 2
          fi
          vercel pull --yes --token $VERCEL_TOKEN --environment=production
          vercel build --prod --token $VERCEL_TOKEN
          URL=$(vercel deploy --prebuilt --prod --token $VERCEL_TOKEN)
          echo "PUBLIC_URL=$URL" >> $GITHUB_ENV

      - name: 🧾 Compose deploy_info.json
        run: |
          SHA=$(git rev-parse --short HEAD)
          TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cat > deploy_info.json << EOF
          {
            "commit": "${SHA}",
            "timestamp": "${TS}",
            "target": "${DEPLOY_TARGET}",
            "url": "${PUBLIC_URL}"
          }
          EOF
          cat deploy_info.json

      - name: 📦 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: deploy-info
          path: deploy_info.json

      - name: 📣 Output URL
        run: |
          echo "Public URL: ${PUBLIC_URL}"
