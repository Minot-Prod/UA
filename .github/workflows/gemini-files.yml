name: Gemini Files Demo
on:
  workflow_dispatch:

jobs:
  files:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare tools
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Create sample file
        shell: bash
        run: |
          set -euo pipefail
          echo "Hello Max from UA. Ceci est un test Files API." > note.txt

      - name: Init upload (get signed URL)
        id: init
        shell: bash
        run: |
          set -euo pipefail
          RES=$(curl -sS -X POST -H "x-goog-api-key: ${GEMINI_API_KEY}" -H "Content-Type: application/json" "https://generativelanguage.googleapis.com/v1beta/files:upload" -d '{"file":{"display_name":"note.txt"}}')
          echo "$RES" | tee files_init.json
          UPLOAD_URL=$(jq -r '.file.upload_url' files_init.json)
          FILE_NAME=$(jq -r '.file.name' files_init.json)
          if [ -z "$UPLOAD_URL" ] || [ -z "$FILE_NAME" ]; then
            echo "Files API init failed"; cat files_init.json; exit 1
          fi
          echo "upload_url=$UPLOAD_URL" >> "$GITHUB_OUTPUT"
          echo "file_name=$FILE_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload binary to signed URL
        shell: bash
        run: |
          set -euo pipefail
          curl -sS -X PUT "${{ steps.init.outputs.upload_url }}" -H "Content-Type: text/plain" --data-binary @note.txt > /dev/null

      - name: Use file in generateContent
        shell: bash
        run: |
          set -euo pipefail
          FILE_NAME="${{ steps.init.outputs.file_name }}"
          BODY=$(jq -nc --arg f "$FILE_NAME" '{contents:[{role:"user",parts:[{file_data:{file_name:$f,mime_type:"text/plain"}},{text:"RÃ©sume ce fichier en une phrase."}]}]}')
          curl -sS -X POST -H "x-goog-api-key: ${GEMINI_API_KEY}" -H "Content-Type: application/json" "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent" -d "$BODY" | tee files_response.json

      - name: Show concise answer
        shell: bash
        run: |
          set -euo pipefail
          jq -r '.candidates[0].content.parts[0].text // "No text found"' files_response.json
