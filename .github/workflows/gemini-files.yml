name: Gemini Files Demo
on:
  workflow_dispatch:

jobs:
  files:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      BASE_URL: https://generativelanguage.googleapis.com
    steps:
      - uses: actions/checkout@v4

      - name: Prepare tools (jq, file)
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq file

      - name: Create sample text file
        shell: bash
        run: |
          set -euo pipefail
          echo "Hello Max from UA. Ceci est un test Files API." > note.txt

      - name: Detect MIME & size
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          MIME_TYPE=$(file -b --mime-type note.txt)
          NUM_BYTES=$(wc -c < note.txt)
          echo "mime=$MIME_TYPE" >> $GITHUB_OUTPUT
          echo "bytes=$NUM_BYTES" >> $GITHUB_OUTPUT
          echo "MIME=$MIME_TYPE SIZE=$NUM_BYTES"

      - name: Start resumable upload (get upload URL)
        id: start
        shell: bash
        run: |
          set -euo pipefail
          # Démarre l'upload resumable et récupère l'URL de session dans les headers
          curl "${BASE_URL}/upload/v1beta/files?key=${GEMINI_API_KEY}" \
            -D upload-headers.tmp \
            -H "X-Goog-Upload-Protocol: resumable" \
            -H "X-Goog-Upload-Command: start" \
            -H "X-Goog-Upload-Header-Content-Length: ${{ steps.meta.outputs.bytes }}" \
            -H "X-Goog-Upload-Header-Content-Type: ${{ steps.meta.outputs.mime }}" \
            -H "Content-Type: application/json" \
            -d '{"file":{"display_name":"note.txt"}}' \
            -o /dev/null

          # L'URL de session est dans le header "X-Goog-Upload-URL:"
          UPLOAD_URL=$(grep -i "X-Goog-Upload-URL:" upload-headers.tmp | awk -F': ' '{print $2}' | tr -d '\r')
          if [ -z "$UPLOAD_URL" ]; then
            echo "No resumable upload URL found"; cat upload-headers.tmp; exit 1
          fi
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "Resumable URL acquired."

      - name: Upload bytes (finalize)
        shell: bash
        run: |
          set -euo pipefail
          curl "${{ steps.start.outputs.upload_url }}" \
            -H "Content-Length: ${{ steps.meta.outputs.bytes }}" \
            -H "X-Goog-Upload-Offset: 0" \
            -H "X-Goog-Upload-Command: upload, finalize" \
            --data-binary @note.txt \
            -o file_info.json

          echo "File info:"
          cat file_info.json
          # La réponse contient .file.uri (à utiliser dans generateContent)
          FILE_URI=$(jq -r '.file.uri // empty' file_info.json)
          if [ -z "$FILE_URI" ]; then
            echo "Missing file.uri in response"; exit 1
          fi
          echo "file_uri=$FILE_URI" >> $GITHUB_OUTPUT

      - name: Use file in generateContent
        shell: bash
        run: |
          set -euo pipefail
          FILE_URI="${{ steps.upload_bytes.outputs.file_uri || steps.start.outputs.file_uri || '' }}"
          # Récupère via file_info.json si pas propagé par GITHUB_OUTPUT
          if [ -z "$FILE_URI" ]; then
            FILE_URI=$(jq -r '.file.uri' file_info.json)
          fi

          BODY=$(jq -nc --arg uri "$FILE_URI" --arg mt "${{ steps.meta.outputs.mime }}" '{
            contents: [{
              role: "user",
              parts: [
                { text: "Résume ce fichier en une phrase." },
                { file_data: { file_uri: $uri, mime_type: $mt } }
              ]
            }]
          }')

          curl -sS -X POST \
            -H "x-goog-api-key: ${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/v1beta/models/gemini-2.5-flash:generateContent" \
            -d "$BODY" | tee files_response.json

      - name: Show concise answer
        shell: bash
        run: |
          set -euo pipefail
          jq -r '.candidates[0].content.parts[0].text // "No text found"' files_response.json
