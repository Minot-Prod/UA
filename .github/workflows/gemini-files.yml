name: Gemini Files Demo
on:
  workflow_dispatch:

jobs:
  files:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (if missing)
        shell: bash
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          jq --version

      - name: Create sample text file
        shell: bash
        run: |
          set -euo pipefail
          printf "Hello Max from UA. Ceci est un test Files API.\n" > note.txt
          ls -l note.txt

      - name: Define endpoints (sanitize CRLF)
        id: ep
        shell: bash
        run: |
          set -euo pipefail
          UP_RAW="https://generativelanguage.googleapis.com/v1beta/files:upload"
          GEN_RAW="https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent"
          UP=$(printf "%s" "$UP_RAW"  | tr -d '\r')
          GEN=$(printf "%s" "$GEN_RAW" | tr -d '\r')
          echo "upload=$UP" >> "$GITHUB_OUTPUT"
          echo "gen=$GEN" >> "$GITHUB_OUTPUT"
          echo "Upload endpoint: $UP"
          echo "Generate endpoint: $GEN"

      - name: Init upload (get upload URL)
        id: init
        shell: bash
        run: |
          set -euo pipefail
          test -n "${GEMINI_API_KEY:-}" || { echo "‚ùå Missing GEMINI_API_KEY secret"; exit 2; }
          UP="${{ steps.ep.outputs.upload }}"
          RES=$(curl -sS -X POST \
            -H "x-goog-api-key: $GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            "$UP" \
            --data-binary @-
