name: UA ‚Üí Gemini (AI Studio v1 ‚Äî NO VERTEX HARDLOCK)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Question √† poser √† Gemini (AI Studio)"
        required: true
        default: "Dis bonjour et propose 2 id√©es IG pour Taslow (ultra concis)."

jobs:
  ask-gemini:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: "false"
      ACTIONS_RUNNER_DEBUG: "false"
      # üîí Mod√®le AI Studio explicite (PAS de publishers/, PAS de -001/-002)
      AI_STUDIO_MODEL: "models/gemini-1.5-flash"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prompt
        id: prompt
        run: echo "value=${{ github.event.inputs.prompt }}" >> $GITHUB_OUTPUT

      - name: V√©rifier le secret (cl√© AI Studio)
        id: secret
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -e
          if [ -z "${GEMINI_API_KEY:-}" ]; then
            echo "‚ùå Secret GEMINI_API_KEY manquant. Repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret." >&2
            exit 3
          fi
          CLEANED="$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          if [ "${#CLEANED}" -lt 20 ]; then
            echo "‚ùå Cl√© suspecte. Reg√©n√®re une cl√© **Gemini API** sur https://ai.google.dev/ (AI Studio), active ‚ÄúGenerative Language API‚Äù, et remets-la dans le secret." >&2
            exit 4
          fi
          echo "::notice::GEMINI_API_KEY charg√©e."

      - name: (Diag) V√©rifier le mod√®le AI Studio (v1)
        id: meta
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MODEL: ${{ env.AI_STUDIO_MODEL }}
        run: |
          set -e
          mkdir -p out
          BASE="https://generativelanguage.googleapis.com/v1"
          URL="$BASE/${MODEL}?key=$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          echo "::notice::GET $URL"
          curl -sS "$URL" > out/model_meta.json || true

          echo "---- model_meta.json ----"
          cat out/model_meta.json
          echo "-------------------------"

          # ‚ùå Hard-stop si une trace 'publishers/' appara√Æt (pattern Vertex)
          if grep -q '"name": *"publishers/' out/model_meta.json; then
            echo "‚ùå D√©tection d'un chemin type Vertex (publishers/...)."
            echo "   ‚ûú Ta cl√© n'est probablement pas une cl√© AI Studio, ou le projet n'a pas l'API 'Generative Language' activ√©e."
            echo "   ‚ûú Solution : g√©n√®re une cl√© **Gemini API** sur https://ai.google.dev/, active l‚ÄôAPI sur ce projet, puis remets-la dans GEMINI_API_KEY."
            exit 10
          fi

          # Si le mod√®le n'est pas trouv√© sur v1 ‚Üí message explicite
          if jq -e '.error' out/model_meta.json >/dev/null 2>&1; then
            echo "‚ùå Erreur meta sur AI Studio v1:"
            cat out/model_meta.json
            echo
            echo "Tips:"
            echo " - V√©rifie que 'Generative Language API' est **ENABLED** sur le m√™me projet que la cl√©."
            echo " - Assure-toi que le mod√®le '${MODEL}' est disponible c√¥t√© AI Studio (essaie 'models/gemini-1.5-pro' si besoin)."
            exit 11
          fi

      - name: Appel AI Studio (v1 generateContent)
        id: call
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          MODEL: ${{ env.AI_STUDIO_MODEL }}
          PROMPT: ${{ steps.prompt.outputs.value }}
        run: |
          set -e
          mkdir -p out
          BASE="https://generativelanguage.googleapis.com/v1"
          URL="$BASE/${MODEL}:generateContent?key=$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          BODY=$(jq -n --arg text "$PROMPT" '{contents: [{"role":"user","parts":[{"text": $text}]}]}')

          echo "::notice::POST $URL"
          curl -sS -X POST "$URL" -H "Content-Type: application/json" -d "$BODY" > out/response.json || {
            echo "‚ùå Requ√™te HTTP √©chou√©e"; exit 5;
          }

          # ‚ùå Stop si on voit un message qui mentionne 'publishers/...-00X' (typiquement Vertex)
          if grep -q 'publishers/.*/gemini-.*-00[12]' out/response.json; then
            echo "‚ùå R√©ponse sugg√®re un mod√®le Vertex ('publishers/...-001/-002')."
            echo "   Ce workflow est AI Studio ONLY. Reprends une cl√© Gemini API AI Studio + API activ√©e."
            cat out/response.json
            exit 12
          fi

          if jq -e '.error' out/response.json >/dev/null 2>&1; then
            echo "‚ùå Erreur AI Studio:"
            cat out/response.json
            exit 6
          fi

          TEXT=$(jq -r '.candidates[0].content.parts[0].text // empty' out/response.json)
          if [ -z "$TEXT" ]; then
            echo "‚ùå Aucune r√©ponse textuelle. Dump JSON ci-dessous:" >&2
            cat out/response.json
            exit 7
          fi

          printf "%s\n" "$TEXT" > out/answer.txt
          echo "answer<<EOF" >> $GITHUB_OUTPUT
          cat out/answer.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publier l‚Äôartifact (r√©ponse + JSON)
        uses: actions/upload-artifact@v4
        with:
          name: ua-gemini-response
          path: out/

      - name: Afficher la r√©ponse
        run: |
          echo "-------- R√©ponse Gemini (AI Studio) --------"
          cat out/answer.txt
          echo "-------------------------------------------"
