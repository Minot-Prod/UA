name: UA to Gemini (AI Studio strict)

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Question à poser à Gemini"
        required: true
        default: "Dis bonjour et propose 2 idées IG pour Taslow (ultra concis)."

jobs:
  ask-gemini:
    runs-on: ubuntu-latest
    env:
      ACTIONS_STEP_DEBUG: "false"
      ACTIONS_RUNNER_DEBUG: "false"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Déterminer le prompt
        id: prompt
        run: |
          echo "value=${{ github.event.inputs.prompt }}" >> $GITHUB_OUTPUT

      - name: Valider la clé (présence/forme)
        id: validate
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -e
          if [ -z "${GEMINI_API_KEY:-}" ]; then
            echo "❌ Secret GEMINI_API_KEY introuvable. Va dans Settings → Secrets and variables → Actions → New repository secret." >&2
            exit 3
          fi
          CLEANED="$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          if [ "${#CLEANED}" -lt 20 ]; then
            echo "❌ Clé trop courte / mal collée. Regénère depuis Google AI Studio (ai.google.dev) et recolle dans le secret." >&2
            exit 4
          fi
          echo "::notice::GEMINI_API_KEY chargé (longueur: ${#CLEANED})"

      - name: (Diag) Lister les modèles via AI Studio
        id: list
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -e
          mkdir -p out
          BASE="https://generativelanguage.googleapis.com/v1beta"
          curl -sS "$BASE/models?key=$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" > out/models.json || true
          echo "---- Extrait de models.json ----"
          (jq -r '.models[]?.name' out/models.json | head -n 30) || cat out/models.json
          echo "--------------------------------"

          # Garde-fou anti-Vertex: si on voit 'publishers/google/models/...-00X', on stoppe
          if jq -e '.models[]?.name | test("^publishers/")' out/models.json >/dev/null 2>&1; then
            echo "❌ On dirait un catalogue Vertex (publishers/...). Tu utilises sûrement une clé Vertex/GCP."
            echo "   ➜ Génére une clé *Gemini API* sur https://ai.google.dev/ (AI Studio), active 'Generative Language API', et remets-la dans GEMINI_API_KEY."
            exit 10
          fi

          # Choisir un modèle AI Studio valide (flash prioritaire, sinon pro)
          MODEL=$(jq -r '.models[]?.name | select(startswith("models/gemini-1.5-flash")) | . // empty' out/models.json | head -n 1)
          if [ -z "$MODEL" ]; then
            MODEL=$(jq -r '.models[]?.name | select(startswith("models/gemini-1.5-pro")) | . // empty' out/models.json | head -n 1)
          fi
          if [ -z "$MODEL" ]; then
            # fallback statique si la liste ne remonte pas (cas rare)
            MODEL="models/gemini-1.5-flash-latest"
          fi

          echo "model=$MODEL" >> $GITHUB_OUTPUT
          echo "::notice::Modèle sélectionné: $MODEL"

      - name: Appel Gemini (AI Studio, generateContent)
        id: call
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PROMPT: ${{ steps.prompt.outputs.value }}
          MODEL: ${{ steps.list.outputs.model }}
        run: |
          set -e
          mkdir -p out
          BASE="https://generativelanguage.googleapis.com/v1beta"
          URL="$BASE/${MODEL}:generateContent?key=$(printf "%s" "$GEMINI_API_KEY" | tr -d '\r' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"

          BODY=$(jq -n --arg text "$PROMPT" '{contents: [{"role":"user","parts":[{"text": $text}]}]}')

          curl -sS -X POST "$URL" -H "Content-Type: application/json" -d "$BODY" > out/response.json || {
            echo "❌ Requête HTTP échouée"; exit 5;
          }

          if jq -e '.error' out/response.json >/dev/null 2>&1; then
            echo "❌ Réponse d'erreur de l'API:"
            cat out/response.json
            exit 6
          fi

          TEXT=$(jq -r '.candidates[0].content.parts[0].text // empty' out/response.json)
          if [ -z "$TEXT" ]; then
            echo "❌ Aucune réponse textuelle. Inspecte out/response.json" >&2
            cat out/response.json
            exit 7
          fi

          printf "%s\n" "$TEXT" > out/answer.txt
          echo "answer<<EOF" >> $GITHUB_OUTPUT
          cat out/answer.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publier l’artifact (réponse + JSON brut)
        uses: actions/upload-artifact@v4
        with:
          name: ua-gemini-response
          path: out/

      - name: Afficher la réponse dans les logs
        run: |
          echo "-------- Réponse Gemini --------"
          cat out/answer.txt
          echo "--------------------------------"
