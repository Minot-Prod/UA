name: Gemini Batch
on:
  workflow_dispatch:

jobs:
  batch:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    steps:
      - name: Prepare jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Create batch job
        id: create
        shell: bash
        run: |
          set -euo pipefail
          REQ='{"requests":[
            {"model":"models/gemini-2.5-flash","contents":[{"parts":[{"text":"Résumé 1 phrase: Projet A (UA)."}]}]},
            {"model":"models/gemini-2.5-flash","contents":[{"parts":[{"text":"Résumé 1 phrase: Projet B (Taslow)."}]}]}
          ]}'
          R=$(curl -sS -X POST -H "x-goog-api-key: ${GEMINI_API_KEY}" -H "Content-Type: application/json" "https://generativelanguage.googleapis.com/v1beta/batch:generateContent" -d "$REQ")
          echo "$R" | tee batch_create.json
          NAME=$(jq -r '.name' batch_create.json)
          test -n "$NAME"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"

      - name: Poll status
        shell: bash
        run: |
          set -euo pipefail
          NAME="${{ steps.create.outputs.name }}"
          for i in {1..30}; do
            R=$(curl -sS -H "x-goog-api-key: ${GEMINI_API_KEY}" "https://generativelanguage.googleapis.com/v1beta/${NAME}")
            STATE=$(echo "$R" | jq -r '.state')
            echo "[$i] state=$STATE"
            if [ "$STATE" = "SUCCEEDED" ]; then
              echo "$R" | jq '.' | tee batch_done.json
              exit 0
            elif [ "$STATE" = "FAILED" ]; then
              echo "$R" | jq '.' | tee batch_failed.json
              exit 1
            fi
            sleep 10
          done
          echo "Timeout polling batch"; exit 1
