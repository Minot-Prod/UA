name: UA Autodiscover
on:
  push:
    paths:
      - "manifests/**"
      - "scripts/**"
      - ".github/workflows/ua-autodiscover.yml"
  workflow_dispatch: {}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      slugs: ${{ steps.export.outputs.slugs }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Discover agents
        id: disc
        run: |
          python3 scripts/discover_agents.py > discover.json
          echo "=== Discover output ==="
          cat discover.json
      - name: Export slugs
        id: export
        run: |
          echo "slugs=$(jq -c '.slugs' discover.json)" >> "$GITHUB_OUTPUT"
      - name: Upload UA registry cache
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ua-registry-cache
          path: manifests/UA_registry_cache.json
          if-no-files-found: ignore

  matrix-smoke:
    needs: discover
    if: ${{ needs.discover.outputs.slugs != '' && needs.discover.outputs.slugs != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        slug: ${{ fromJson(needs.discover.outputs.slugs) }}
    env:
      BASE_URL: ${{ secrets.UA_N8N_BASE_URL }}
    steps:
      - uses: actions/checkout@v4
      - name: Print context
        run: echo "Slug=${{ matrix.slug }}"
      - name: Resolve manifest & payloads
        id: resolve
        shell: bash
        run: |
          set -e
          SLUG="${{ matrix.slug }}"
          CANDIDATES=("manifests/AGENT_${SLUG}.manifest.json" "manifests/AGENT_${SLUG^^}.manifest.json" "manifests/AGENT_${SLUG,,}.manifest.json")
          MANIFEST=""
          for M in "${CANDIDATES[@]}"; do
            if [ -f "$M" ]; then MANIFEST="$M"; break; fi
          done
          if [ -z "$MANIFEST" ]; then
            echo "::error::Manifest not found for slug $SLUG"
            exit 1
          fi
          echo "manifest=$MANIFEST" >> "$GITHUB_OUTPUT"
          PING=$(jq -r '.tests.payloads.ping // empty' "$MANIFEST")
          DEMO=$(jq -r '.tests.payloads.demo // empty' "$MANIFEST")
          echo "ping=$PING" >> "$GITHUB_OUTPUT"
          echo "demo=$DEMO" >> "$GITHUB_OUTPUT"
      - name: Optional live smoke (if BASE_URL set)
        if: ${{ env.BASE_URL != '' }}
        run: |
          set -e
          for f in "${{ steps.resolve.outputs.ping }}" "${{ steps.resolve.outputs.demo }}"; do
            if [ -n "$f" ] && [ -f "$f" ]; then
              echo "--> POST $f"
              curl -sS -X POST "$BASE_URL" -H "Content-Type: application/json" --data @"$f" || true
              echo
            else
              echo "Skip (missing file): $f"
            fi
          done
