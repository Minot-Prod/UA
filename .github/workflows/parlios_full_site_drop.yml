name: Parlios — Full Site Drop (Build + QA + ZIP)

on:
  workflow_dispatch:
    inputs:
      hub_repo:
        description: "Repo Hub (optionnel) ex: Minot-Prod/Parlios-Hub"
        required: false
        default: ""
      ua_repo:
        description: "Repo UA (pour assets brand) ex: Minot-Prod/UA"
        required: false
        default: "Minot-Prod/UA"
  push:
    branches: [ main ]
    paths:
      - "apps/**"
      - "tools/**"
      - "packages/**"
      - "public/**"
      - "assets/**"
      - "src/**"
      - "pages/**"
      - "_redirects"
      - "netlify.toml"
      - ".github/workflows/parlios_full_site_drop.yml"

permissions:
  contents: read

jobs:
  build-zip:
    runs-on: ubuntu-latest
    env:
      OUT_BASENAME: Parlios_Full_Site_Drop
      READY_MARKERS: "ready production-ready"
      TOOLS_GLOBS: "apps/*/dist tools/*/dist packages/*/app/dist"
      WEB_CANDIDATES: "dist .next/out out build public"
      # Si tu as un dossier de sortie spécifique (ex: "site"), mets-le en premier dans WEB_CANDIDATES.

    steps:
      - name: Checkout — Site (repo courant)
        uses: actions/checkout@v4

      - name: Checkout — Hub (optionnel)
        if: ${{ inputs.hub_repo != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.hub_repo }}
          path: hub

      - name: Checkout — UA (assets brand)
        if: ${{ inputs.ua_repo != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.ua_repo }}
          path: ua

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Build — Site
        shell: bash
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            npm ci --no-audit --no-fund || npm i --no-audit --no-fund
            if npm run | grep -qE '^ *build'; then npm run build; fi
          fi

      - name: Build — Hub (optionnel)
        if: ${{ inputs.hub_repo != '' }}
        shell: bash
        run: |
          set -euo pipefail
          cd hub || exit 0
          if [ -f package.json ]; then
            npm ci --no-audit --no-fund || npm i --no-audit --no-fund
            if npm run | grep -qE '^ *build'; then npm run build; fi
          fi

      - name: Stage — Init + Branding
        shell: bash
        run: |
          set -euo pipefail
          STAGE="$GITHUB_WORKSPACE/__stage"
          mkdir -p "$STAGE/assets/brand" "$STAGE/assets/images"

          # Copie brand assets depuis le repo courant
          for src in \
            "assets/brand" \
            "public/assets/brand"; do
            [ -d "$src" ] && cp -a "$src/." "$STAGE/assets/brand/"
          done

          # Copie brand assets depuis UA (si présent)
          if [ -d "ua" ]; then
            for src in \
              "ua/assets/brand" \
              "ua/public/assets/brand"; do
              [ -d "$src" ] && cp -a "$src/." "$STAGE/assets/brand/"
            done
          fi

          # Logo officiel prioritaire si présent
          for logo in \
            "assets/brand/parlios-logo.png" \
            "public/assets/brand/parlios-logo.png" \
            "ua/assets/brand/parlios-logo.png" \
            "ua/public/assets/brand/parlios-logo.png"; do
            [ -f "$logo" ] && cp -a "$logo" "$STAGE/assets/brand/parlios-logo.png"
          done
          echo "STAGE=$STAGE" >> $GITHUB_ENV

      - name: Stage — Copier le site statique
        shell: bash
        run: |
          set -euo pipefail
          for cand in $WEB_CANDIDATES; do
            if [ -d "$cand" ]; then
              cp -a "$cand/." "$STAGE/"
            fi
          done

      - name: Stage — Copier le Hub (optionnel)
        if: ${{ inputs.hub_repo != '' }}
        shell: bash
        run: |
          set -euo pipefail
          for cand in dist .next/out out build; do
            if [ -d "hub/$cand" ]; then
              mkdir -p "$STAGE/hub"
              cp -a "hub/$cand/." "$STAGE/hub/"
            fi
          done

      - name: Stage — Agréger les OUTILS “Ready”
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$STAGE/tools"
          found=false
          # Recherche dans repo site + repo hub (si présent)
          for root in "$GITHUB_WORKSPACE" "$GITHUB_WORKSPACE/hub"; do
            [ -d "$root" ] || continue
            ( cd "$root"
              for g in $TOOLS_GLOBS; do
                for path in $(ls -d $g 2>/dev/null || true); do
                  [ -d "$path" ] || continue
                  appdir="$(dirname "$path")"
                  name="$(basename "$appdir")"

                  ready="false"
                  for marker in $READY_MARKERS; do
                    [ -f "$appdir/$marker" ] && ready="true"
                  done
                  if [ -f "$appdir/package.json" ] && grep -q '"parlios.ready"[[:space:]]*:[[:space:]]*true' "$appdir/package.json"; then
                    ready="true"
                  fi

                  if [ "$ready" = "true" ]; then
                    echo "→ TOOL READY: $name"
                    mkdir -p "$STAGE/tools/$name"
                    cp -a "$path/." "$STAGE/tools/$name/"
                    found=true
                  else
                    echo "(draft) $name non Ready → ignoré (affiché grisé côté UI si géré)"
                  fi
                done
              done
            )
          done

          if [ "$found" = "false" ]; then
            echo "::warning::Aucun outil Ready détecté — la page Outils n’aura que des placeholders."
          fi

      - name: Stage — Netlify files + README_DROP
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "$STAGE/_redirects" ]; then
            cat > "$STAGE/_redirects" <<'REDIR'
/*    /index.html    200
REDIR
          fi
          if [ ! -f "$STAGE/netlify.toml" ]; then
            cat > "$STAGE/netlify.toml" <<'TOML'
[build]
  publish = "."

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "SAMEORIGIN"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
TOML
          fi
          cat > "$STAGE/README_DROP.md" <<'MD'
# Parlios — Netlify Drop
1) Ouvrez https://app.netlify.com/drop et glissez ce ZIP.
2) Attendez le déploiement et récupérez l’URL.
3) Vérifiez Accueil → Hub → Outils (toutes les tuiles “Ready” ouvrent un outil fonctionnel).
4) QA conseillée : Lighthouse ≥ 90, Pa11y AA 0 blocker, 0 lien cassé.
MD

      - name: QA — Serve statique + Lighthouse / Pa11y / Linkinator
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          pushd "$STAGE" >/dev/null
          npx --yes serve -s . -l 4173 >/dev/null 2>&1 &
          SRVPID=$!
          sleep 2
          mkdir -p "$GITHUB_WORKSPACE/__qa"
          npx --yes @lhci/cli healthcheck || true
          npx --yes lighthouse http://localhost:4173/ --output=json --output-path="$GITHUB_WORKSPACE/__qa/lh_home.json" --quiet || true
          npx --yes lighthouse http://localhost:4173/outils/ --output=json --output-path="$GITHUB_WORKSPACE/__qa/lh_tools.json" --quiet || true
          npx --yes pa11y-ci --sitemap http://localhost:4173/sitemap.xml --threshold 0 || true
          npx --yes linkinator http://localhost:4173/ --silent --json > "$GITHUB_WORKSPACE/__qa/links.json" || true
          kill $SRVPID || true
          popd >/dev/null

      - name: Package — ZIP Netlify Drop
        shell: bash
        run: |
          set -euo pipefail
          OUT="${OUT_BASENAME}_$(date +%Y%m%d).zip"
          (cd "$STAGE" && zip -qr "../$OUT" .)
          echo "OUT_ZIP=$GITHUB_WORKSPACE/$OUT" >> $GITHUB_ENV

      - name: Upload artifact — ZIP
        uses: actions/upload-artifact@v4
        with:
          name: Parlios_Full_Site_Drop
          path: ${{ env.OUT_ZIP }}
          if-no-files-found: error
          retention-days: 14

      - name: Upload artifact — QA reports
        uses: actions/upload-artifact@v4
        with:
          name: QA_reports
          path: __qa/**
          if-no-files-found: warn
          retention-days: 14
