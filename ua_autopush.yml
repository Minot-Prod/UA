name: UA AutoPush Bundle
on:
  workflow_dispatch: {}
jobs:
  autopush:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  - name: Write agents/rma/UA_MemoryBridge_Setup.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_MemoryBridge_Setup.rma.md)"
      cat <<'EOF' > agents/rma/UA_MemoryBridge_Setup.rma.md
/run-mode-agent
Name: UA_MemoryBridge_Setup
Goal: Créer un pont de mémoire centralisant toutes les sources internes (CREDIT_LOG, manifests, rapports, UA_Report_20250923.md, patchs) en un seul index JSON.
Scope:
  - Scanner le dépôt GitHub Minot-Prod/UA
  - Récupérer les fichiers listés et produire memory_index.json
  - Ajouter ce fichier dans /data/
Inputs:
  - Repo: Minot-Prod/UA (lecture)
Outputs:
  - /data/memory_index.json
Steps:
  1) Recenser fichiers (CREDIT_LOG.md, *manifest*.json, UA_Report_*.md, *_patch*.md, README*.md).
  2) Construire un index JSON avec métadonnées {path, size, sha, tags}.
  3) Écrire /data/memory_index.json, ouvrir PR.
Acceptance:
  - Fichier /data/memory_index.json créé et validé.
  - PR ouverte avec commentaire "UA Memory Bridge ready".
Target Agent: OpsAgent
Expected Outcome: Mémoire unifiée, plus de recherche manuelle.
EOF

  - name: Write agents/rma/UA_PromptIntelligence_Layer.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_PromptIntelligence_Layer.rma.md)"
      cat <<'EOF' > agents/rma/UA_PromptIntelligence_Layer.rma.md
/run-mode-agent
Name: UA_PromptIntelligence_Layer
Goal: Mettre en place un système d’analyse et de scoring automatique pour les prompts Gold.
Scope:
  - Lire prompts_gold_index.json
  - Évaluer chaque prompt selon pertinence, succès, stabilité
  - Générer /data/prompts_ranking.json
Inputs:
  - /data/prompts_gold_index.json (ou prompts_gold_index.json à la racine)
Outputs:
  - /data/prompts_ranking.json
  - .github/workflows/prompt-metrics.yml
Steps:
  1) Parser l’index, calculer score 0–100 (poids: robustesse 40, utilité 40, réutilisation 20).
  2) Exporter JSON trié desc.
  3) Ajouter GHA "Prompt Metrics" pour publier un badge.
Acceptance:
  - prompts_ranking.json généré.
  - Badge de métriques en sortie d’action.
Target Agent: MAP
Expected Outcome: Sélection automatique du meilleur prompt selon contexte.
EOF

  - name: Write agents/rma/UA_n8n_MasterOrchestrator.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_n8n_MasterOrchestrator.rma.md)"
      cat <<'EOF' > agents/rma/UA_n8n_MasterOrchestrator.rma.md
/run-mode-agent
Name: UA_n8n_MasterOrchestrator
Goal: Fusionner tous les workflows n8n en un orchestrateur maître gérant les séquences d’exécution.
Scope:
  - Identifier workflows /research, /qa, /ci, /dashboard
  - Créer UA_Master_Orchestrator.json (n8n export)
  - Ajouter steps "CREDIT_LOG sync" + "auto-retry"
Inputs:
  - N8N_API_TOKEN, UA_N8N_BASE_URL
Outputs:
  - /deliverables/UA_Master_Orchestrator.json
Steps:
  1) Lister les workflows via API n8n.
  2) Construire orchestrateur avec liens et conditions.
  3) Exporter et commiter.
Acceptance:
  - Orchestrateur invocable (200 OK).
  - Log "Master Orchestrator deployed ✅".
Target Agent: OpsAgent
Expected Outcome: Exécution fiable et séquencée.
EOF

  - name: Write agents/rma/UA_Base44_FusionCore.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_Base44_FusionCore.rma.md)"
      cat <<'EOF' > agents/rma/UA_Base44_FusionCore.rma.md
/run-mode-agent
Name: UA_Base44_FusionCore
Goal: Créer un module base44-core pour budgets, checkpoints et logs de crédits.
Scope:
  - Extraire règles Base44 des Blueprints et CREDIT_LOG
  - Générer /core/base44_core.js
  - Ajouter README_Base44_Core.md
Inputs:
  - CREDIT_LOG.md, Blueprints*
Outputs:
  - /core/base44_core.js
  - /core/README_Base44_Core.md
Steps:
  1) Implémenter Score + Budget + Checkpoint 70%.
  2) Exposer API JS simple (computeBudget, shouldCheckpoint, logCredit).
  3) Tests unitaires minimalistes.
Acceptance:
  - Module importable (node test).
  - PR fusionnable.
Target Agent: MAP
Expected Outcome: Politique homogène dans tout l’écosystème.
EOF

  - name: Write agents/rma/UA_Research_AutoUpdater.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_Research_AutoUpdater.rma.md)"
      cat <<'EOF' > agents/rma/UA_Research_AutoUpdater.rma.md
/run-mode-agent
Name: UA_Research_AutoUpdater
Goal: Mettre à jour automatiquement la bibliothèque de prompts Gold chaque semaine.
Scope:
  - Créer GitHub Action .github/workflows/research-updater.yml
  - Ajouter script /scripts/research_updater.mjs
  - Intégrer résultats dans prompts_gold_index.json
  - Générer deliverables/research/research_update_20251015.md
Inputs:
  - Sources publiques (APIs/feeds autorisés), GitHub search
Outputs:
  - /deliverables/research/research_update_20251015.md
  - /data/prompts_gold_index.json (mis à jour)
Steps:
  1) Rechercher 50 meilleurs nouveaux prompts selon thèmes Parlios.
  2) Dédupliquer, classifier, mettre à jour l’index.
  3) Générer rapport markdown.
Acceptance:
  - Rapport hebdo généré.
  - Carte Dashboard mise à jour.
Target Agent: ResearchAgent
Expected Outcome: Veille automatisée et pérenne.
EOF

  - name: Write agents/rma/UA_SelfImproving_Blueprints.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_SelfImproving_Blueprints.rma.md)"
      cat <<'EOF' > agents/rma/UA_SelfImproving_Blueprints.rma.md
/run-mode-agent
Name: UA_SelfImproving_Blueprints
Goal: Optimiser automatiquement tous les Blueprints (forme et complétude).
Scope:
  - Parcourir Blueprint_*.md
  - Corriger Goal/Scope/Acceptance/Edge/Tests
  - Produire Blueprint_Improved_YYYYMMDD.md + audit
Inputs:
  - dossiers docs/ et racine
Outputs:
  - /docs/Blueprint_Audit.md
  - /docs/Blueprint_Improved_*.md
Steps:
  1) Analyse statique (sections manquantes / incohérences).
  2) Correction guidée, harmonisation.
  3) Rapport d’audit + diffs.
Acceptance:
  - Conformité >90% Base44.
  - Audit généré.
Target Agent: QA_Guardian
Expected Outcome: Blueprints solides et standardisés.
EOF

  - name: Write agents/rma/UA_Store_Module.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_Store_Module.rma.md)"
      cat <<'EOF' > agents/rma/UA_Store_Module.rma.md
/run-mode-agent
Name: UA_Store_Module
Goal: Construire une interface web interne "UA Store" (React + Supabase) pour activer/désactiver des agents.
Scope:
  - Lire manifest.json (agents)
  - UI: liste, ON/OFF, statut, crédits
  - API: mise à jour manifest + logs
Inputs:
  - Supabase (auth + table modules)
Outputs:
  - /apps/store/README.md
  - /apps/store/spec.md
Steps:
  1) Définir schéma Supabase (table modules, logs).
  2) Page React /store (Next ou Vite acceptable).
  3) Intégration manifest.json.
Acceptance:
  - UI opérationnelle localement.
  - PR avec spec + base UI.
Target Agent: DevAgent
Expected Outcome: Activation modulaire simple.
EOF

  - name: Write agents/rma/UA_Community_Bridge.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_Community_Bridge.rma.md)"
      cat <<'EOF' > agents/rma/UA_Community_Bridge.rma.md
/run-mode-agent
Name: UA_Community_Bridge
Goal: Déployer la section publique "Open Prompts" (votes & tri) sur parlios.ca/open-prompts.
Scope:
  - Lire /data/prompts_gold_index.json
  - UI publique: liste, recherche, vote
  - Stockage votes: Supabase (table votes)
Inputs:
  - Supabase (table votes)
Outputs:
  - /public/open-prompts/index.html
  - /public/open-prompts/spec.md
Steps:
  1) Ébauche UI statique + script léger.
  2) Endpoints Supabase (insert/select).
  3) Politique RLS (lecture publique, écriture limitée).
Acceptance:
  - Page accessible + fonctionnelle.
  - README d’installation.
Target Agent: SocialOps
Expected Outcome: Engagement communauté et data utile.
EOF

  - name: Write agents/rma/UA_BackToYomi_Mentor.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_BackToYomi_Mentor.rma.md)"
      cat <<'EOF' > agents/rma/UA_BackToYomi_Mentor.rma.md
/run-mode-agent
Name: UA_BackToYomi_Mentor
Goal: Activer un module coach quotidien basé sur UA_Mantra_Yomi.md.
Scope:
  - Lire Mantra Yomi
  - Générer message quotidien (Discord/Email)
  - Historiser /reports/yomi/
Inputs:
  - UA_Mantra_Yomi.md
Outputs:
  - /reports/yomi/yomi_daily_YYYYMMDD.md
  - /.github/workflows/yomi-daily.yml
Steps:
  1) Script message (template + variables).
  2) GHA cron quotidien 08:30 America/Toronto.
  3) Envoi via webhook/SMTP si dispo, sinon commit.
Acceptance:
  - Message quotidien généré.
  - Historique tracé.
Target Agent: LeadershipAgent
Expected Outcome: Discipline et cap stratégique.
EOF

  - name: Write agents/rma/UA_EconomicFeedback_System.rma.md
    shell: bash
    run: |
      mkdir -p "$(dirname agents/rma/UA_EconomicFeedback_System.rma.md)"
      cat <<'EOF' > agents/rma/UA_EconomicFeedback_System.rma.md
/run-mode-agent
Name: UA_EconomicFeedback_System
Goal: Réinvestir automatiquement les crédits économisés dans la veille de prompts.
Scope:
  - Lire CREDIT_LOG
  - Calculer % crédits restants par run
  - Déclencher ResearchAgent si surplus >= seuil
Inputs:
  - CREDIT_LOG.md
Outputs:
  - /data/econ_feedback_config.json
  - /reports/economy/weekly_report.md
Steps:
  1) Paramétrer seuils (ex: 15%).
  2) Hook déclencheur vers UA_Research_AutoUpdater.
  3) Rapport hebdomadaire d’utilisation.
Acceptance:
  - Logs “Auto-Investment Triggered ✅” visibles.
  - Rapport hebdo généré.
Target Agent: FinanceAgent
Expected Outcome: Boucle d’amélioration continue.
EOF

  - name: Write core/base44_core.js
    shell: bash
    run: |
      mkdir -p "$(dirname core/base44_core.js)"
      cat <<'EOF' > core/base44_core.js

// base44_core.js — Minimal core (draft)
function score(params) {
  const { scope=2, novelty=1, data=1, integrations=1, ui=1, risk=1, deadline=1 } = params || {};
  let base = 20 + 10*scope + 8*novelty + 6*data + 6*integrations + 5*ui + 8*risk + 4*deadline;
  return Math.min(100, Math.max(0, base));
}
function budget(scoreVal){
  const b = 5 + 0.7*scoreVal;
  return Math.max(10, Math.min(40, b));
}
function shouldCheckpoint(spent, total){ return spent >= 0.7*total; }
module.exports = { score, budget, shouldCheckpoint };

EOF

  - name: Write core/README_Base44_Core.md
    shell: bash
    run: |
      mkdir -p "$(dirname core/README_Base44_Core.md)"
      cat <<'EOF' > core/README_Base44_Core.md

# Base44 Core (draft)
API: score(), budget(), shouldCheckpoint().

EOF

  - name: Write .github/workflows/research-updater.yml
    shell: bash
    run: |
      mkdir -p "$(dirname .github/workflows/research-updater.yml)"
      cat <<'EOF' > .github/workflows/research-updater.yml

name: Research Updater
on:
  schedule:
    - cron: '0 13 * * 1'
  workflow_dispatch: {}
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20' }
      - name: Install deps
        run: npm i || true
      - name: Run updater
        run: node ./scripts/research_updater.mjs || true
      - name: Commit report
        run: |
          git config user.name "ua-bot"
          git config user.email "ua-bot@users.noreply.github.com"
          git add .
          git commit -m "chore(research): update prompts & report 20251015" || echo "No changes"
          git push

EOF

  - name: Write .github/workflows/prompt-metrics.yml
    shell: bash
    run: |
      mkdir -p "$(dirname .github/workflows/prompt-metrics.yml)"
      cat <<'EOF' > .github/workflows/prompt-metrics.yml

name: Prompt Metrics
on:
  workflow_dispatch: {}
jobs:
  metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate metrics badge
        run: |
          node -e "const fs=require('fs');let rank='N/A';try{const d=JSON.parse(fs.readFileSync('./data/prompts_ranking.json','utf8'));rank=d.length;}catch(e){};fs.writeFileSync('./data/prompt_metrics_badge.txt',`prompts:${rank}`)"
      - name: Commit badge
        run: |
          git config user.name "ua-bot"
          git config user.email "ua-bot@users.noreply.github.com"
          git add ./data/prompt_metrics_badge.txt
          git commit -m "chore(metrics): update prompt badge" || echo "No changes"
          git push

EOF

  - name: Write .github/workflows/yomi-daily.yml
    shell: bash
    run: |
      mkdir -p "$(dirname .github/workflows/yomi-daily.yml)"
      cat <<'EOF' > .github/workflows/yomi-daily.yml

name: Yomi Daily
on:
  schedule:
    - cron: '30 12 * * *'
  workflow_dispatch: {}
jobs:
  daily:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate daily message
        run: |
          mkdir -p reports/yomi
          echo "# Back to Yomi — Daily" > reports/yomi/yomi_daily_$(date +%Y%m%d).md
          echo "" >> reports/yomi/yomi_daily_$(date +%Y%m%d).md
          echo "- Rappels: focus, simplicité, shipping." >> reports/yomi/yomi_daily_$(date +%Y%m%d).md
      - name: Commit
        run: |
          git config user.name "ua-bot"
          git config user.email "ua-bot@users.noreply.github.com"
          git add reports/yomi
          git commit -m "chore(yomi): daily message" || echo "No changes"
          git push

EOF

  - name: Write scripts/research_updater.mjs
    shell: bash
    run: |
      mkdir -p "$(dirname scripts/research_updater.mjs)"
      cat <<'EOF' > scripts/research_updater.mjs

// scripts/research_updater.mjs — placeholder
import fs from 'fs';
const outDir = './deliverables/research';
if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
const today = '20251015';
const report = `# Research Update — $20251015\n\n- (placeholder) nouveaux prompts intégrés.`;
fs.writeFileSync(`${outDir}/research_update_${today}.md`, report);

EOF

  - name: Write public/open-prompts/index.html
    shell: bash
    run: |
      mkdir -p "$(dirname public/open-prompts/index.html)"
      cat <<'EOF' > public/open-prompts/index.html

<!doctype html>
<html lang="fr">
<head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Open Prompts — Parlios</title></head>
<body>
  <h1>Open Prompts — Parlios</h1>
  <p>Prototype statique. À relier à Supabase pour votes.</p>
  <div id="list"></div>
  <script>
    fetch('/data/prompts_gold_index.json').then(r=>r.json()).then(d=>{
      const el = document.getElementById('list');
      el.innerHTML = d.slice(0,50).map(x=>`<div><strong>${x.name||'Prompt'}</strong> — ${x.tag||''}</div>`).join('');
    }).catch(()=>{ document.getElementById('list').innerText='(Aucun index disponible)'; });
  </script>
</body>
</html>

EOF

  - name: Write apps/store/README.md
    shell: bash
    run: |
      mkdir -p "$(dirname apps/store/README.md)"
      cat <<'EOF' > apps/store/README.md

# UA Store — README
UI React + Supabase pour activer/désactiver des agents.

EOF

  - name: Write apps/store/spec.md
    shell: bash
    run: |
      mkdir -p "$(dirname apps/store/spec.md)"
      cat <<'EOF' > apps/store/spec.md

## Spec — UA Store
Tables: modules(id, key, name, enabled, credits, updated_at), logs(...)

EOF

  - name: Write public/open-prompts/spec.md
    shell: bash
    run: |
      mkdir -p "$(dirname public/open-prompts/spec.md)"
      cat <<'EOF' > public/open-prompts/spec.md

# Spec — Open Prompts
Votes via Supabase, RLS lecture publique, écriture authentifiée.

EOF

      - name: Commit & Push
        shell: bash
        run: |
          git config user.name "ua-bot"
          git config user.email "ua-bot@users.noreply.github.com"
          git add .
          git commit -m "feat(UA): add multi-agent prompts, core & workflows (AutoPush)"
          git push
