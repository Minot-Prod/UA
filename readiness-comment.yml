name: Readiness Summary on PR

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  readiness-summary:
    name: Post Readiness Summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate readiness JSON
        id: locate
        shell: bash
        run: |
          set -e
          CANDIDATES=("reports/GitHub_Readiness_Report.json" "GitHub_Readiness_Report.json")
          FOUND=""
          for p in "${CANDIDATES[@]}"; do
            if [ -f "$p" ]; then
              FOUND="$p"
              break
            fi
          done
          if [ -z "$FOUND" ]; then
            # fallback: search within 3 levels
            FOUND=$(find . -maxdepth 3 -type f -name "GitHub_Readiness_Report.json" | head -n1 || true)
          fi
          if [ -z "$FOUND" ]; then
            echo "readiness_path=" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "readiness_path=${FOUND#./}" >> $GITHUB_OUTPUT
          echo "Found: ${FOUND}"

      - name: Parse readiness JSON
        id: parse
        if: steps.locate.outputs.readiness_path != ''
        shell: bash
        run: |
          set -e
          FILE="${{ steps.locate.outputs.readiness_path }}"
          echo "Using readiness file: $FILE"
          # jq is available on ubuntu-latest
          STATUS=$(jq -r '.verdict.status // "UNKNOWN"' "$FILE")
          NEXT=$(jq -r '.verdict.next_action // ""' "$FILE")
          SUMMARY=$(jq -r '.verdict.summary // ""' "$FILE")
          SEC=$(jq -r '.security_secrets.UA_N8N_BASE_URL // ""' "$FILE")
          GAP_SEC=$(jq -r '.conformity_summary.market_gap_2025.security // ""' "$FILE")
          STRUC=$(jq -r '.structure.status // ""' "$FILE")
          CICD_COMMENT=$(jq -r '.cicd.comment // ""' "$FILE")
          DATE=$(jq -r '.date // ""' "$FILE")
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "next=$NEXT" >> $GITHUB_OUTPUT
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          echo "sec=$SEC" >> $GITHUB_OUTPUT
          echo "gap_sec=$GAP_SEC" >> $GITHUB_OUTPUT
          echo "struc=$STRUC" >> $GITHUB_OUTPUT
          echo "cicd_comment=$CICD_COMMENT" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Post comment
        if: steps.locate.outputs.readiness_path != ''
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const { context, github } = require('@actions/github');
            const body = `### ✅ Parlios Readiness Report
**Date:** ${core.getInput('date')}
**Status:** **${core.getInput('status')}**  
**Summary:** ${core.getInput('summary')}

**Structure:** ${core.getInput('struc')}
**CI/CD:** ${core.getInput('cicd_comment')}
**Security (UA_N8N_BASE_URL):** ${core.getInput('sec')} — gap: ${core.getInput('gap_sec')}

**Next action:** ${core.getInput('next')}

_Read from:_ \`${{ steps.locate.outputs.readiness_path }}\``;

            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body
            });
          result-encoding: string
          inputs: |
            status: ${{ steps.parse.outputs.status }}
            next: ${{ steps.parse.outputs.next }}
            summary: ${{ steps.parse.outputs.summary }}
            sec: ${{ steps.parse.outputs.sec }}
            gap_sec: ${{ steps.parse.outputs.gap_sec }}
            struc: ${{ steps.parse.outputs.struc }}
            cicd_comment: ${{ steps.parse.outputs.cicd_comment }}
            date: ${{ steps.parse.outputs.date }}

      - name: Warn if readiness JSON missing
        if: steps.locate.outputs.readiness_path == ''
        uses: actions/github-script@v7
        with:
          script: |
            const { context, github } = require('@actions/github');
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: `⚠️ No \`GitHub_Readiness_Report.json\` found in this PR. Please include it under \`reports/\` or at repo root to enable automated readiness checks.`
            });
